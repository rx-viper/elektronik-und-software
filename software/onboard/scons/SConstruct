"""
WARNING: THIS IS A GENERIC SCONSTRUCT FILE FOR ALL VIPER XPCC PROJECTS!
         YOU NEED TO EXECUTE THIS FILE INSIDE YOUR PROJECTS SCONSTRUCT FILE:

# path to the xpcc root directory (modify as required!)
xpccpath = '../xpcc'
# path to the software common directory (modify as required!)
common_path = '../../'
# execute the scons file
execfile(common_path + '/scons/SConstruct')
"""

# This variables MUST be defined externally
# xpccpath = '../../../xpcc'
# common_path = '../../common'

import os, sys, subprocess
import SCons.Script

# path to the xpcc root directory
# xpccpath = '../../../../../xpcc'

# Create the SConstruct environment
env = Environment(tools = ['xpcc'], toolpath = [xpccpath + '/scons/site_tools'])

# build the xpcc library
env.XpccLibrary()
# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()
# build xpcc_git_info.hpp file
env.GitInfoHeader()
# build xpcc_build_info.hpp file
env.BuildInfoHeader()

# common_path = os.path.join('..', '..', '..', 'common')
communication_path = os.path.join(common_path, 'communication')
communication_src_path = os.path.join(communication_path, 'src')
packets_xml_path = os.path.abspath(os.path.join(communication_path, 'packets.xml'))
packets_generated_path = os.path.abspath(os.path.join(communication_path, 'generated'))
packets_generated_cpp = os.path.join(packets_generated_path, 'Packets.cpp')
packets_generated_hpp = os.path.join(packets_generated_path, 'Packets.hpp')
packets_generator_path = os.path.join(communication_path, 'packet_generator')
packets_template_cpp = os.path.join(packets_generator_path, 'Packets.cpp.tpl')
packets_template_hpp = os.path.join(packets_generator_path, 'Packets.hpp.tpl')

include_paths = ['.', communication_src_path, packets_generated_path]
search_paths = ['.', communication_src_path, packets_generated_path]

for path in include_paths:
	env.Append(CPPPATH = path)

# find all source files
files = env.FindFiles(path = search_paths)

generator = os.path.abspath(os.path.join(packets_generator_path, 'PacketGenerator.py'))
generator_action = SCons.Action.Action('%s %s %s' % (generator, packets_xml_path, packets_generated_path))
generator_targets = [packets_generated_cpp, packets_generated_hpp]
generator_source = [packets_xml_path, packets_template_cpp, packets_template_hpp]

generated_packets = env.Command(generator_targets, generator_source, generator_action)

# build the program
program = env.Program(target = env['XPCC_PROJECT_NAME'], source = files.sources)

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())
env.Alias('qtcreator', env.QtCreatorProject(files))

if env.CheckArchitecture('hosted'):
    env.Alias('build', program)
    env.Alias('run', env.Run(program))
    env.Alias('all', ['build', 'run'])
elif env.CheckArchitecture('cortex'):
	hexfile = env.Hex(program)
	binfile = env.Bin(program)

	env.Alias('dfu', env.DfuStm32Programmer(binfile))
	env.Alias('program', env.OpenOcd(program))
	env.Alias('openocd-debug', env.OpenOcdDebug(program))
	env.Alias('debug', env.GdbDebug(program))
	env.Alias('listing', env.Listing(program))
	env.Alias('build', hexfile)
	env.Alias('all', ['build', 'qtcreator', 'size'])

env.Default('all')
